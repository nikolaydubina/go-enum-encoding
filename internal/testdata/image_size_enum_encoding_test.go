// Code generated by go-enum-encoding; DO NOT EDIT.

package image

import (
	"encoding/json"
	"errors"
	"fmt"
	"math/rand"
	"slices"
	"testing"
)

func ExampleImageSize_MarshalText() {
	for _, v := range []ImageSize{UndefinedSize, Small, Large, XLarge} {
		b, _ := v.MarshalText()
		fmt.Printf("%s ", string(b))
	}
	// Output:  small large xlarge
}

func ExampleImageSize_UnmarshalText() {
	for _, s := range []string{"", "small", "large", "xlarge"} {
		var v ImageSize
		if err := (&v).UnmarshalText([]byte(s)); err != nil {
			fmt.Println(err)
		}
	}
}

func TestImageSize_MarshalText_UnmarshalText(t *testing.T) {
	for _, v := range []ImageSize{UndefinedSize, Small, Large, XLarge} {
		b, err := v.MarshalText()
		if err != nil {
			t.Errorf("cannot encode: %s", err)
		}

		var d ImageSize
		if err := (&d).UnmarshalText(b); err != nil {
			t.Errorf("cannot decode: %s", err)
		}

		if d != v {
			t.Errorf("exp(%v) != got(%v)", v, d)
		}
	}

	t.Run("when unknown value, then error", func(t *testing.T) {
		s := `something`
		var v ImageSize
		err := (&v).UnmarshalText([]byte(s))
		if err == nil {
			t.Error("must be error")
		}
		if !errors.Is(err, ErrUnknownImageSize) {
			t.Error("wrong error", err)
		}
	})
}

func TestImageSize_JSON(t *testing.T) {
	type V struct {
		Values []ImageSize `json:"values"`
	}

	values := []ImageSize{UndefinedSize, Small, Large, XLarge}

	var v V
	s := `{"values":["","small","large","xlarge"]}`
	json.Unmarshal([]byte(s), &v)

	if len(v.Values) != len(values) {
		t.Errorf("cannot decode: %d", len(v.Values))
	}
	if !slices.Equal(v.Values, values) {
		t.Errorf("wrong decoded: %v", v.Values)
	}

	b, err := json.Marshal(v)
	if err != nil {
		t.Fatalf("cannot encode: %s", err)
	}
	if string(b) != s {
		t.Errorf("wrong encoded: %s != %s", string(b), s)
	}

	t.Run("when unknown value, then error", func(t *testing.T) {
		s := `{"values":["something"]}`
		var v V
		err := json.Unmarshal([]byte(s), &v)
		if err == nil {
			t.Error("must be error")
		}
		if !errors.Is(err, ErrUnknownImageSize) {
			t.Error("wrong error", err)
		}
	})
}

func BenchmarkImageSize_UnmarshalText(b *testing.B) {
	vb := seq_bytes_ImageSize[rand.Intn(len(seq_bytes_ImageSize))]

	var x ImageSize

	for b.Loop() {
		_ = x.UnmarshalText(vb)
	}
}

func BenchmarkImageSize_AppendText(b *testing.B) {
	bb := make([]byte, 10, 1000)

	vs := []ImageSize{UndefinedSize, Small, Large, XLarge}
	v := vs[rand.Intn(len(vs))]

	for b.Loop() {
		_, _ = v.AppendText(bb)
	}
}

func BenchmarkImageSize_MarshalText(b *testing.B) {
	vs := []ImageSize{UndefinedSize, Small, Large, XLarge}
	v := vs[rand.Intn(len(vs))]

	for b.Loop() {
		_, _ = v.MarshalText()
	}
}

func TestImageSize_String(t *testing.T) {
	values := []ImageSize{UndefinedSize, Small, Large, XLarge}
	tags := []string{"", "small", "large", "xlarge"}

	for i := range values {
		if s := values[i].String(); s != tags[i] {
			t.Error(s, tags[i])
		}
	}
}

func BenchmarkImageSize_String(b *testing.B) {
	vs := []ImageSize{UndefinedSize, Small, Large, XLarge}
	v := vs[rand.Intn(len(vs))]

	for b.Loop() {
		_ = v.String()
	}
}
