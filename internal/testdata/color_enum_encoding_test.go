// Code generated by go-enum-encoding; DO NOT EDIT.

package image

import (
	"encoding/json"
	"errors"
	"fmt"
	"math/rand"
	"slices"
	"testing"
)

func ExampleColor_MarshalText() {
	for _, v := range []Color{UndefinedColor, Red, Green, Blue} {
		b, _ := v.MarshalText()
		fmt.Printf("%s ", string(b))
	}
	// Output:  red green blue
}

func ExampleColor_UnmarshalText() {
	for _, s := range []string{"", "red", "green", "blue"} {
		var v Color
		if err := (&v).UnmarshalText([]byte(s)); err != nil {
			fmt.Println(err)
		}
	}
}

func TestColor_MarshalText_UnmarshalText(t *testing.T) {
	for _, v := range []Color{UndefinedColor, Red, Green, Blue} {
		b, err := v.MarshalText()
		if err != nil {
			t.Errorf("cannot encode: %s", err)
		}

		var d Color
		if err := (&d).UnmarshalText(b); err != nil {
			t.Errorf("cannot decode: %s", err)
		}

		if d != v {
			t.Errorf("exp(%v) != got(%v)", v, d)
		}
	}

	t.Run("when unknown value, then error", func(t *testing.T) {
		s := `something`
		var v Color
		err := (&v).UnmarshalText([]byte(s))
		if err == nil {
			t.Error("must be error")
		}
		if !errors.Is(err, ErrUnknownColor) {
			t.Error("wrong error", err)
		}
	})
}

func TestColor_JSON(t *testing.T) {
	type V struct {
		Values []Color `json:"values"`
	}

	values := []Color{UndefinedColor, Red, Green, Blue}

	var v V
	s := `{"values":["","red","green","blue"]}`
	json.Unmarshal([]byte(s), &v)

	if len(v.Values) != len(values) {
		t.Errorf("cannot decode: %d", len(v.Values))
	}
	if !slices.Equal(v.Values, values) {
		t.Errorf("wrong decoded: %v", v.Values)
	}

	b, err := json.Marshal(v)
	if err != nil {
		t.Fatalf("cannot encode: %s", err)
	}
	if string(b) != s {
		t.Errorf("wrong encoded: %s != %s", string(b), s)
	}

	t.Run("when unknown value, then error", func(t *testing.T) {
		s := `{"values":["something"]}`
		var v V
		err := json.Unmarshal([]byte(s), &v)
		if err == nil {
			t.Error("must be error")
		}
		if !errors.Is(err, ErrUnknownColor) {
			t.Error("wrong error", err)
		}
	})
}

func BenchmarkColor_UnmarshalText(b *testing.B) {
	vb := seq_bytes_Color[rand.Intn(len(seq_bytes_Color))]

	var x Color

	for b.Loop() {
		_ = x.UnmarshalText(vb)
	}
}

func BenchmarkColor_AppendText(b *testing.B) {
	bb := make([]byte, 10, 1000)

	vs := []Color{UndefinedColor, Red, Green, Blue}
	v := vs[rand.Intn(len(vs))]

	for b.Loop() {
		_, _ = v.AppendText(bb)
	}
}

func BenchmarkColor_MarshalText(b *testing.B) {
	vs := []Color{UndefinedColor, Red, Green, Blue}
	v := vs[rand.Intn(len(vs))]

	for b.Loop() {
		_, _ = v.MarshalText()
	}
}
