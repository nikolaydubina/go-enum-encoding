// Code generated by go-enum-encoding; DO NOT EDIT.

package {{.Package}}

import (
	"fmt"
	"testing"
	"errors"
)

func Example{{.Type}}_{{.EncodeMethod}}() {
	for _, v := range []{{.Type}}{{{.Values}}} {
		b, _ := v.{{.EncodeMethod}}()
		fmt.Printf("%s ", string(b))
	}
	// Output: {{.TagsNaked}}
}

func Example{{.Type}}_{{.DecodeMethod}}() {
	for _, s := range []string{{{.Tags}}} {
		var v {{.Type}}
		if err := (&v).{{.DecodeMethod}}([]byte(s)); err != nil {
			fmt.Println(err)
		}
	}
}

func Test{{.Type}}_{{.EncodeMethod}}_{{.DecodeMethod}}(t *testing.T) {
	for _, v := range []{{.Type}}{{{.Values}}} {
		b, err := v.{{.EncodeMethod}}()
		if err != nil {
			t.Errorf("cannot encode: %s", err)
		}

		var d {{.Type}}
		if err := (&d).{{.DecodeMethod}}(b); err != nil {
			t.Errorf("cannot decode: %s", err)
		}

		if d != v {
			t.Errorf("exp(%v) != got(%v)", v, d)
		}
	}

	t.Run("when unknown value, then error", func(t *testing.T) {
		s := `something`
		var v {{.Type}}
		err := (&v).{{.DecodeMethod}}([]byte(s))
		if err == nil {
			t.Errorf("must be error")
		}
		if !errors.Is(err, ErrUnknown{{.Type}}) {
			t.Errorf("wrong error: %s", err)
		}
	})
}

func Benchmark{{.Type}}_{{.EncodeMethod}}(b *testing.B) {
	for b.Loop() {
		for _, c := range []{{.Type}}{{{.Values}}} {
			if _, err := c.{{.EncodeMethod}}(); err != nil {
				b.Fatal("empty")
			}
		}
	}
}

func Benchmark{{.Type}}_{{.DecodeMethod}}(b *testing.B) {
	var x {{.Type}}
	for b.Loop() {
		for _, c := range []string{{{.Tags}}} {
			if err := x.{{.DecodeMethod}}([]byte(c)); err != nil {
				b.Fatal("cannot decode")
			}
		}
	}
}
